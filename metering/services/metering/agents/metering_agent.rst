===============================================
MeteringAgentの解析
===============================================

class MeteringPluginRpc(proxy.RpcProxy):
==========================================

MeteringAgentがMeteringPluginとRPC会話するために、MeteringAgentによって使われるクラス。
RPCのバージョンは以下::

  BASE_RPC_API_VERSION = '1.0'


def __init__(self, host):
---------------------------

初期化している。


def _get_sync_data_metering(self, context):
-----------------------------------------------

neutron-server(のMeteringPluginの)、get_sync_data_meteringをhost引数を与えて呼び出し、このmetering agentが動作しているrouterの一覧を得る((個々のルータ情報には、label_idとlabel_ruleの情報が含まれる)　


class MeteringAgent(MeteringPluginRpc, manager.Manager):
==========================================================

MeteringAgentの実体となるクラス

データ構造
-------------

以下の通り。

+----------------------------+--------------------------------+
|データ                      |説明                            | 
+============================+================================+ 
|self.conf                   |a                               |
+----------------------------+--------------------------------+
|self.root_helper            |b                               |
+----------------------------+--------------------------------+
|self.context                |c                               |
+----------------------------+--------------------------------+
|self.metering_info          |d                               |
+----------------------------+--------------------------------+
|self.metering_loop          |e                               |
+----------------------------+--------------------------------+
|measure_interval            |f                               |
+----------------------------+--------------------------------+
|self.last_report            |g                               |
+----------------------------+--------------------------------+
|self.host                   |h                               |
+----------------------------+--------------------------------+
|self.label_tenant_id        |i                               |
+----------------------------+--------------------------------+
|self.routers                |j                               |
+----------------------------+--------------------------------+
|self.metering_infos         |                                |
+----------------------------+--------------------------------+
                             
def __init__(self, host, conf=None):
---------------------------------------

以下の内容で初期化

1. Driverのロード
2. adminコンテキストを生成してself.contextに格納
3. self._metering_loopをloopingcall.FixedIntervalLoopingCallを利用して起動
4. 計測のインターバルをconfから読み込み
5. 計測ループの開始(self.metering_loop.start,実体は_metering_loopメソッド)















